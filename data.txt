import {gql} from '@apollo/client'



 
export const SIGNUP_USER= gql 
`
mutation createUser($userNew:UserInput){
    user:signupUser(userNew:$userNew){
     firstName
      
    }
  }
`
export const LOGIN_USER= gql 
`
mutation SigninUser($userSignin:UserSignIN){
    user:signinUser(userSignin:$userSignin){
      token
    }
  }
`
export const CREATE_QUOTE= gql 
`
mutation createQuote($name:String){
    quote:createQuote(name:$name)
  }
`
---------------

import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { BrowserRouter } from "react-router-dom";
import {
  ApolloClient,
  InMemoryCache,
  ApolloProvider,
  useQuery,
  gql,
} from "@apollo/client";

const client = new ApolloClient({
  uri: "http://localhost:4000",
  cache: new InMemoryCache(),
  headers:{
    authorization: localStorage.getItem("token") || ""
  }
});
ReactDOM.render(
  <React.StrictMode>
    <BrowserRouter>
      <ApolloProvider client={client}>
        <App />
      </ApolloProvider>
    </BrowserRouter>
  </React.StrictMode>,
  document.getElementById("root")
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


---------

import { useMutation } from '@apollo/client'
import React,{useState} from 'react'
import { CREATE_QUOTE } from '../gqloperations/mutations'
import { GET_ALL_QUOTES } from '../gqloperations/queries'

export default function CreateQuote() {
    const [quote,setQuote] = useState("")
    const [createQuote,{loading,error,data}]=useMutation(CREATE_QUOTE,{
        refetchQueries:[
            GET_ALL_QUOTES,
            'getAllQuotes'
        ]
    })
    const handleSubmit = (e)=>{
        e.preventDefault()
        console.log(quote)
        createQuote({
            variables:{
                name:quote
            }
        })
    }
    if(error){
        console.log(error);
    }
    return (
        <div className="container my-container">
            {data && 
            <div>{data.quote}</div>
            }
            <form onSubmit={handleSubmit}>
                <input 
                    type="text" 
                    value={quote}
                    onChange={e=>setQuote(e.target.value)}
                    placeholder="write your quote here"
                    />
                 <button className="btn green">create</button>
            </form>
            
        </div>
    )
}
